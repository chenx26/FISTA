if(percentage_HW){
method.names = method.names[-1]
legend.names = legend.names[-1]
#        method.names = c("glmnetRcpp_Keep", "AR.FPE", "AR.glmnet")
}
# legend.names = c("glmnetRcpp", "AR.FPE", "AR.glmnet")
# method.names = colnames(MC_res[[1]][[1]])[-1]
# colors = seq(1, length(method.names), by = 1)
# pchs = seq(1, length(method.names), by = 1)
# cexs = rep(1, length(method.names))
# legend.names = method.names
# colors = c(2,3, 1)
# pchs = c(2,15, 19)
# cexs = c(0.6,0.8, 1)
if(percentage_HW){
# colors = c(3, 1)
# pchs = c(15, 19)
# cexs = c(1, 1)
colors = c("red", "black")
pchs = c(2, 1)
cexs = c(1, 1)
# colors = 1:length(legend.names)
# pchs = 1:length(legend.names)
# cexs = rep(1, length(legend.names))
}
# legend.names = c("NeweyWest", "GLM-EXP/EN", "GLM-EXP/EN-PW")
# colors = c(2,3, 1)
# pchs = c(2,15, 19)
# cexs = c(0.6,0.8, 1)
# legend.names = c("NeweyWest", "AR", "GLM-EXP/EN")
key.trans = list(space = "top",
columns = length(legend.names),
text = list(legend.names),
points = list(col = colors, pch = pchs, cex = cexs),
cex.title = 1, cex = 1.5)
main_title_cex = 2
ylab_cex = 2
keep_vec = c(1)
for(ndata in ndatas){
######### start of plotting code
#       plot.name = paste0(plot.dir, "AR1_SE_bias_variance_",ndata,"_Loop.pdf")
#       pdf(plot.name, 12, 12)
#        pdf(paste0("test_",ndata,".pdf"), 12,12)
for(keep in keep_vec){
MC_res = ndata_res_list[[paste0("ndata=",ndata)]][[paste0("keep=", keep)]]
for(metric in metrics){
plot.name = paste0(plot.dir, "AR1_SE_",ndata,"_Percentage_increase_seCorIF_",metric,".png")
png(plot.name, 1024, 768)
metric.fun = switch(metric,
"bias" = compute_bias,
"variance" = compute_variance,
"MSE" = compute_MSE,
"RMSE" = compute_RMSE,
"stddev" = compute_stddev,
"var_mse_ratio" = compute_variance_mse_ratio,
"bias2_mse_ratio" = compute_bias2_mse_ratio,
"bias_rmse_ratio" = compute_bias_rmse_ratio
)
melt.df = data.frame()
estimator.name = "Mean"
for(estimator.name in estimator.names){
mydata = MC_res[[estimator.name]]
res.mat = t(sapply(mydata, metric.fun, percentage_MC = percentage_MC, percentage_NW = percentage_NW,percentage_HW = percentage_HW))[1:nrows,method.names]
if(percentage_increase)
res.mat = res.mat - 100
tmp = rownames(res.mat)
res.mat = cbind(estimator.name,as.numeric(sapply(tmp, function(x) strsplit(x, "=")[[1]][2])), res.mat)
colnames(res.mat)[2] = "phis"
rownames(res.mat) = NULL
melt.df = rbind(melt.df, res.mat)
}
res.df = melt(melt.df, id.vars = c("estimator.name", "phis"))
res.df$value = as.numeric(res.df$value)
# dotplot(value ~ factor(phis) | estimator.name, res.df,groups = variable,
#         layout = c(2, ceiling(length(estimator.names)/2)), aspect = c(0.7))
main_string = paste(firstup(metric), "for sample size", ndata)
ylab = firstup(metric)
if (percentage_HW & (metric %in% c("bias", "stddev", "RMSE"))){
main_string = paste0("R", main_string)
if(percentage_increase){
ylab = paste0("% ", ylab, " increase")
} else{
ylab = paste0("R", ylab)
}
}
print(dotplot(value ~ factor(phis) | estimator.name, res.df,
layout = c(2, ceiling(length(estimator.names)/2)), aspect = c(0.7),
#        par.settings = list(superpose.symbol = list(pch=pchs)),
groups = variable, key = key.trans,
pch=pchs, col = colors, cex = cexs,
index.cond = list(c(3,4,5,6,1,2)),
par.strip.text=list(cex=1.2),
scales=list(cex=c(1.4,1.4), alternating=3,y=list(relation="same")),
ylab = list(ylab, cex = ylab_cex),
#                                      ylim = c(min(res.df$value) - max(abs(res.df$value)) * 0.1, max(res.df$value) + max(abs(res.df$value)) * .1),
panel = function(x, y, ...){
panel.grid(v = -1, h = -1)
panel.dotplot(x, y, ...)}
# ,main = list(label = main_string, cex = main_title_cex)
#                                      ,main = paste(metric, "for sample size", ndata, "keep", keep)
)
)
dev.off()
}
}
}
tmp = ndata_res_list[[1]][[1]][[1]][[1]]
colnames(tmp)
rm(list=ls())
library(glmnet)
library(arm)
# library(numDeriv)
# library(h2o)
source("FISTA.R")
# generate test data
seed = 1234
set.seed(seed)
nsims = 100
scale.x.true = FALSE
# shape.true = exp(rnorm(1))
shape.true = 10
m = 200 # num of examples
n = 6 # num of variables
# true solution with sparsity
if(scale.x.true){
x.true = rnorm(n, sd = sqrt(1/max(m,n)))
} else {
x.true = rnorm(n)
}
# x.true = rnorm(n)
# x.true = log(x.true + min(c(x.true, 0)) + 0.0001)
zero.idx = sample(1:n, n * 0.5)
x.true[zero.idx] = 0
# generate A matrix and b
A = matrix(rnorm(m * n, sqrt(1/max(m,n))), nrow = m) # independent variables
A = scale(A, center = TRUE)
# A = log(A + min(c(A, 0)) + 0.0001)
# A = log(A)
# scales = exp(A %*% x.true) / shape.true
# b = sapply(scales, function(x) rgamma(1, shape = shape.true, scale = x))  # dependent variable, A %*% x.true + noise
# b = c(scale(b, center = FALSE))
b_true <- exp(A %*% x.true)
shape
alpha.EN
alpha.EN = 0.5
rm(list=ls())
library(glmnet)
library(arm)
# library(numDeriv)
# library(h2o)
source("FISTA.R")
# generate test data
seed = 1234
set.seed(seed)
nsims = 100
scale.x.true = FALSE
# shape.true = exp(rnorm(1))
shape.true = 10
m = 200 # num of examples
n = 6 # num of variables
alpha.EN = 0.5
ABSTOL = 1e-8
maxiter = 1e4
# true solution with sparsity
if(scale.x.true){
x.true = rnorm(n, sd = sqrt(1/max(m,n)))
} else {
x.true = rnorm(n)
}
# x.true = rnorm(n)
# x.true = log(x.true + min(c(x.true, 0)) + 0.0001)
zero.idx = sample(1:n, n * 0.5)
x.true[zero.idx] = 0
# generate A matrix and b
A = matrix(rnorm(m * n, sqrt(1/max(m,n))), nrow = m) # independent variables
A = scale(A, center = TRUE)
# A = log(A + min(c(A, 0)) + 0.0001)
# A = log(A)
# scales = exp(A %*% x.true) / shape.true
# b = sapply(scales, function(x) rgamma(1, shape = shape.true, scale = x))  # dependent variable, A %*% x.true + noise
# b = c(scale(b, center = FALSE))
b_true <- exp(A %*% x.true)
b <- rgamma(m, rate = shape.true / b_true, shape = shape.true)
dim(A)
dum(b)
dim(b)
b
b%*%A
?%*%
t(A) %*% b
rm(list=ls())
library(glmnet)
library(arm)
# library(numDeriv)
# library(h2o)
source("FISTA.R")
# generate test data
seed = 1234
set.seed(seed)
nsims = 100
scale.x.true = FALSE
# shape.true = exp(rnorm(1))
shape.true = 10
m = 200 # num of examples
n = 6 # num of variables
alpha.EN = 0.5
ABSTOL = 1e-8
maxiter = 1e4
# true solution with sparsity
if(scale.x.true){
x.true = rnorm(n, sd = sqrt(1/max(m,n)))
} else {
x.true = rnorm(n)
}
# x.true = rnorm(n)
# x.true = log(x.true + min(c(x.true, 0)) + 0.0001)
zero.idx = sample(1:n, n * 0.5)
x.true[zero.idx] = 0
# generate A matrix and b
A = matrix(rnorm(m * n, sqrt(1/max(m,n))), nrow = m) # independent variables
A = scale(A, center = TRUE)
# A = log(A + min(c(A, 0)) + 0.0001)
# A = log(A)
# scales = exp(A %*% x.true) / shape.true
# b = sapply(scales, function(x) rgamma(1, shape = shape.true, scale = x))  # dependent variable, A %*% x.true + noise
# b = c(scale(b, center = FALSE))
b_true <- exp(A %*% x.true)
b <- rgamma(m, rate = shape.true / b_true, shape = shape.true)
b
b <- rgamma(1, rate = shape.true / b_true, shape = shape.true)
shape.true / b_true
?rgamma
setwd("~/MyCode/FISTA")
N <- 100
x <- runif(N, -1, 1)
a <- 0.5
b <- 0
y_true <- exp(a + b * x)
shape <- 10
shape / y_true
y_true
x <- runif(N, -1, 1)
set.seed(999)
N <- 100
x <- runif(N, -1, 1)
a <- 0.5
b <- 2
y_true <- exp(a + b * x)
shape <- 10
y <- rgamma(N, rate = shape / y_true, shape = shape)
shape / y_true
y
rm(list=ls())
library(glmnet)
library(arm)
# library(numDeriv)
# library(h2o)
source("FISTA.R")
# generate test data
seed = 1234
set.seed(seed)
nsims = 100
scale.x.true = FALSE
# shape.true = exp(rnorm(1))
shape.true = 10
m = 200 # num of examples
n = 6 # num of variables
alpha.EN = 0.5
ABSTOL = 1e-8
maxiter = 1e4
# true solution with sparsity
if(scale.x.true){
x.true = rnorm(n, sd = sqrt(1/max(m,n)))
} else {
x.true = rnorm(n)
}
# x.true = rnorm(n)
# x.true = log(x.true + min(c(x.true, 0)) + 0.0001)
zero.idx = sample(1:n, n * 0.5)
x.true[zero.idx] = 0
x.true
save.image(paste0("./data/", seed, "_", m, "_", n, "_", nsims, "_", shape.true, "_", scale.x.true, ".Rdata"))
load("./data/1234_200_6_100_10_FALSE.Rdata)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
rm(list=ls())
library(glmnet)
library(arm)
# library(numDeriv)
# library(h2o)
source("FISTA.R")
# generate test data
seed = 1234
set.seed(seed)
nsims = 1000
scale.x.true = FALSE
# shape.true = exp(rnorm(1))
shape.true = 10
m = 200 # num of examples
n = 6 # num of variables
alpha.EN = 0.5
ABSTOL = 1e-8
maxiter = 1e4
# true solution with sparsity
if(scale.x.true){
x.true = rnorm(n, sd = sqrt(1/max(m,n)))
} else {
x.true = rnorm(n)
}
# x.true = rnorm(n)
# x.true = log(x.true + min(c(x.true, 0)) + 0.0001)
zero.idx = sample(1:n, n * 0.5)
x.true[zero.idx] = 0
# generate A matrix and b
A = matrix(rnorm(m * n, sqrt(1/max(m,n))), nrow = m) # independent variables
A = scale(A, center = TRUE)
# A = log(A + min(c(A, 0)) + 0.0001)
# A = log(A)
# scales = exp(A %*% x.true) / shape.true
# b = sapply(scales, function(x) rgamma(1, shape = shape.true, scale = x))  # dependent variable, A %*% x.true + noise
# b = c(scale(b, center = FALSE))
b_true <- exp(A %*% x.true)
reslist = list()
for(sim.iter in 1:nsims){
b <- rgamma(1, rate = shape.true / b_true, shape = shape.true)
# nll_gamma_optim(c(x.true, shape.true), A, b)
# f(x.true)
# set alpha.EN and lambda.EN
# lambda.EN.max = norm(t(A) %*% b, "i")
lambda.EN.max = find_lambda_max_Gamma_GLM_EN(A, b, alpha.EN, shape.true)
lambda_vec = generate_lambda_grid(A, b, alpha.EN, shape.true)
lambda.EN = lambda_vec[50]
# lambda.EN = 0
# lambda.EN = 0
# use FISTA implementation
f = function(x){
nll_gamma_glm(x, A, b, shape.true)
}
f_grad = function(x){
nll_gamma_glm_grad(x, A, b, shape.true)
}
f_grad_num = function(x){
grad(f, x)
}
g = function(x){
regularizer_EN(x, lambda.EN = lambda.EN, alpha.EN = alpha.EN)
}
g_prox = function(x, lambda){
prox_EN(x, lambda = lambda, lambda.EN = lambda.EN, alpha.EN = alpha.EN)
}
res.FISTA = FISTA(rep(0, n), f, g, f_grad, g_prox, ABSTOL = ABSTOL, maxiter = maxiter)
res.df = cbind(x.true, res.FISTA$x)
apply(res.df, 2, function(x) sum(x==0))
res.df
# res.glm.optim = fit_glm_gamma(c(rnorm(n), exp(rnorm(1))), A, b)
# c(tail(res.glm.optim$par,1), shape.true)
# res.glmnet = glmnet(A, b, alpha = alpha.EN, lambda = lambda.EN, standardize = FALSE, intercept = FALSE)
# res.glmnet$beta
# res.FISTA.numgrad = FISTA(rep(0, n), f, g, f_grad_num, g_prox, ABSTOL = ABSTOL, maxiter = maxiter)
# res.FISTA.numgrad
m_glm <- glm(b ~ A - 1, family = Gamma(link = "log"))
coef(m_glm)
(res.optim = optim(rep(0, ncol(A)), function(x) f(x) + g(x), method = "BFGS"))
# cbind(x.true, res.FISTA$x, res.optim$par)
# # f_grad_num(rep(0, ncol(A)))
# # f_grad(rep(0, ncol(A)))
# res.optim$value
# tail(res.FISTA$objvals,1)
# res.glmGammaNet = glmGammaNet(rep(0, ncol(A)), A, b, lambda.EN, shape.true)
# cbind(x.true, res.glmGammaNet$x)
res.cv.glmGammaNet = cv.glmGammaNet(A, b, alpha.EN = alpha.EN, nlambda = 100)
res.cv.glmGammaNet$best.lambda.EN
res.cv.glmGammaNet$x
x.true
res.cv.glmGammaNet$cv.NLL
#plot(res.cv.glmGammaNet$lambda.EN.vec, res.cv.glmGammaNet$NLL_vec, type = "l")
res.cv.glmGammaNet$shape
shape.true
(res.coeffs = cbind(x.true, coef(m_glm), res.cv.glmGammaNet$x))
which(res.cv.glmGammaNet$lambda.EN.vec == res.cv.glmGammaNet$best.lambda.EN)
apply(res.coeffs, 2, function(x) sum( abs(x) <= 1e-8))
res.cv.glmnet = cv.glmnet(A, b, alpha = alpha.EN, standardize = FALSE, intercept = FALSE)
res.cv.glmnet$cvm
###plot(res.cv.glmnet$cvm)
###plot(res.cv.glmnet)
lambda.glmnet = res.cv.glmnet$lambda[which.min(res.cv.glmnet$cvm)]
res.glmnet = glmnet(A, b, alpha = alpha.EN, lambda = lambda.glmnet, standardize = FALSE, intercept = FALSE)
res.glmnet$beta
x.true
(res.coeffs = data.frame(x.true = x.true, x.glm = coef(m_glm), x.glmGammaNet = res.cv.glmGammaNet$x, x.glmnet = as.vector(res.glmnet$beta)))
res.cv.glmGammaNet$best.idx
nll_gamma_optim(c(x.true, shape.true), A, b)
nll_gamma_optim(c(res.cv.glmGammaNet$x, res.cv.glmGammaNet$shape), A, b)
apply(res.coeffs, 2, function(x) sum( abs(x) <= 1e-8))
res.cv.glmGammaNet$NLL_vec[res.cv.glmGammaNet$best.idx]
NLL_vec = res.cv.glmGammaNet$NLL_vec
best.idx = res.cv.glmGammaNet$best.idx
NLL_sds = res.cv.glmGammaNet$NLL_sds
which(NLL_vec <= NLL_vec[best.idx] + NLL_sds[best.idx])
#plot(res.cv.glmGammaNet$NLL_vec, type = "l")
x.tmp = glmGammaNet(rep(0, ncol(A)), A, b, lambda.EN = res.cv.glmGammaNet$lambda.EN.vec[82], res.cv.glmGammaNet$shape)
cbind(x.true, x.tmp$x)
res.cv.glmGammaNet$x
best.idx
(res.coeffs = data.frame(x.true = x.true, x.glm = coef(m_glm), x.glmGammaNet = res.cv.glmGammaNet$x, x.glmnet = as.vector(res.glmnet$beta)))
reslist[[sim.iter]] = res.coeffs
}
# lambda.EN.max = norm(t(A) %*% b, "i")
lambda.EN.max = find_lambda_max_Gamma_GLM_EN(A, b, alpha.EN, shape.true)
A
b
b_true
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
warnings()
setwd("~/MyCode/FISTA")
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
length(reslist)
save.image(paste0("./data/", seed, "_", m, "_", n, "_", nsims, "_", shape.true, "_", scale.x.true, ".Rdata"))
setwd("~/MyCode/FISTA")
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
setwd("~/MyCode/FISTA")
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
# Histogram of Zeros
reslist[[1]]
computeIncorrectZeros(reslist[[1]], zero.idx)
x.true
zero.idx
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
save.image(paste0("./data/", seed, "_", m, "_", n, "_", numzero, "_", nsims, "_", shape.true, "_", scale.x.true, ".Rdata"))
write.csv(res.df, paste0("./data/", seed, "_", m, "_", n, "_", numzero, "_", nsims, "_", shape.true, "_", scale.x.true, ".csv"))
discrete.histogram(zeros.score[2,], bar.width = 0.6)
x.true
reslist[1]
num_nonzeros = sapply(reslist, function(x) apply(x, 2, function(x) sum(abs(x) > 1e-8)))
dim(num_nonzeros)
discrete.histogram(num_nonzeros[3,])
num_nonzeros
discrete.histogram(num_nonzeros[4,])
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
num_nonzeros = sapply(reslist, function(x) apply(x, 2, function(x) sum(abs(x) > 1e-8)))
discrete.histogram(num_nonzeros[4,])
discrete.histogram(num_nonzeros[3,])
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
num_nonzeros
discrete.histogram(num_nonzeros[4,])
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
res.df
discrete.histogram(num_nonzeros[3,])
discrete.histogram(num_nonzeros[4,])
discrete.histogram(zeros.score[2,], bar.width = 0.6)
discrete.histogram(num_nonzeros[3,])
discrete.histogram(num_nonzeros[4,])
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
res.df
best.idx = res.cv.glmGammaNet$best.idx
NLL_threshold = res.cv.glmGammaNet$NLL_vec[best.idx] + res.cv.glmGammaNet$NLL_sds[best.idx]
NLL_threshold
plot(res.cv.glmGammaNet$NLL_vec)
plot(res.cv.glmGammaNet$NLL_vec, type = "l")
res.cv.glmGammaNet$NLL_vec < NLL_threshold
which(res.cv.glmGammaNet$NLL_vec < NLL_threshold)
max(which(res.cv.glmGammaNet$NLL_vec < NLL_threshold))
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
source('~/MyCode/FISTA/run_FISTA_Gamma_GLM.R', echo=TRUE)
str(error.L1)
apply(error.L1, 1, mean)
histogram(error.L1[1,])
computeCorrectZeros = function(x, true.zero.idx, tol = 1e-8){
res = NULL
for(i in 2:ncol(x)){
idx = which(abs(x[,i]) <= tol)
nzero = 0
for(i in idx){
if (i %in% true.zero.idx)
nzero = nzero + 1
}
res = c(res, nzero)
}
res
}
zeros.correct = sapply(reslist, computeCorrectZeros, true.zero.idx = zero.idx)
computeIncorrectZeros = function(x, true.zero.idx, tol = 1e-8){
res = NULL
for(i in 2:ncol(x)){
idx = which(abs(x[,i]) <= tol)
nzero = 0
for(i in idx){
if (!i %in% true.zero.idx)
nzero = nzero + 1
}
res = c(res, nzero)
}
res
}
zeros.incorrect = sapply(reslist, computeIncorrectZeros, true.zero.idx = zero.idx)
zeros.score = zeros.correct - zeros.incorrect
# performance metrics
res.df = data.frame(error.L1 = apply(error.L1, 1, mean),
zeros.correct = apply(zeros.correct, 1 , mean),
zeros.incorrect = apply(zeros.incorrect, 1, mean),
zeros.score = apply(zeros.score, 1 , mean)
)
res.df
rownames(res.df) = c("glmGamma", "glmGammaNet", "glmGammaNet.percentile", "glmGammaNet.1sd", "glmnet")
filename = paste0( seed, "_", m, "_", n, "_", smallest.idx, "_", numzero, "_", nsims, "_", shape.true, "_", scale.x.true)
num_nonzeros = sapply(reslist, function(x) apply(x, 2, function(x) sum(abs(x) > 1e-8)))
discrete.histogram(num_nonzeros[3,])
num_nonzeros
res.df
